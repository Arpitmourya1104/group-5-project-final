name: Deploy CloudFormation and Run AWS Glue Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DATALAKE_BUCKET: ${{ vars.DATALAKE_BUCKET }}
      DATAWAREHOUSE_BUCKET: ${{ vars.DATAWAREHOUSE_BUCKET }}
      SCRIPT_BUCKET: ${{ vars.SCRIPT_BUCKET }}
      STACK_NAME: ${{ vars.STACK_NAME }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check if DataLake Bucket Exists
      id: check-datalake-bucket
      run: |
        set +e
        if aws s3 ls s3://${DATALAKE_BUCKET} > /dev/null 2>&1; then
          echo "DataLake bucket ${DATALAKE_BUCKET} already exists."
        else
          echo "DataLake bucket ${DATALAKE_BUCKET} does not exist."
          exit 1
        fi
        echo "DATALAKE_BUCKET_EXISTS=true" >> $GITHUB_ENV

    - name: Check if DataWarehouse Bucket Exists
      id: check-datawarehouse-bucket
      run: |
        set +e
        if aws s3 ls s3://${DATAWAREHOUSE_BUCKET} > /dev/null 2>&1; then
          echo "DataWarehouse bucket ${DATAWAREHOUSE_BUCKET} already exists."
        else
          echo "DataWarehouse bucket ${DATAWAREHOUSE_BUCKET} does not exist."
          exit 1
        fi
        echo "DATAWAREHOUSE_BUCKET_EXISTS=true" >> $GITHUB_ENV

    - name: Upload Python scripts to S3
      if: env.DATALAKE_BUCKET_EXISTS == 'true' && env.DATAWAREHOUSE_BUCKET_EXISTS == 'true'
      run: |
        aws s3 cp ingestion.py s3://${SCRIPT_BUCKET}/script-ingestion/
        aws s3 cp pre_processing.py s3://${SCRIPT_BUCKET}/script-pre-processing/

    - name: Validate CloudFormation template
      run: |
        aws cloudformation validate-template --template-body file://cft-template.yaml

    - name: Check if CloudFormation stack exists
      id: check-stack
      run: |
        if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} &>/dev/null; then
          echo "Stack ${{ env.STACK_NAME }} already exists."
          echo "STACK_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Stack does not exist."
          echo "STACK_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Create and Deploy CloudFormation stack
      id: create-deploy-stack
      if: env.STACK_EXISTS == 'false'
      run: |
        set +e
        aws cloudformation create-stack \
          --stack-name ${{ env.STACK_NAME }} \
          --template-body file://cft-template.yaml \
          --parameters ParameterKey=DataLakeBucket,ParameterValue=${DATALAKE_BUCKET} ParameterKey=DataWarehouseBucket,ParameterValue=${DATAWAREHOUSE_BUCKET} ParameterKey=GlueRoleArn,ParameterValue=${{ secrets.GLUE_ROLE_ARN }} ParameterKey=ScriptBucket,ParameterValue=${SCRIPT_BUCKET} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        CREATE_STATUS=$?
        set -e
        if [ $CREATE_STATUS -ne 0 ]; then
          echo "Stack creation failed. Checking if stack exists..."
          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].StackStatus" --output text)
          if [ "$STACK_EXISTS" == "ROLLBACK_COMPLETE" ] || [ "$STACK_EXISTS" == "CREATE_FAILED" ]; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            echo "Waiting for stack to be deleted..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
          fi
          exit 1
        fi
        aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}

    - name: Get Workflow Name
      id: get-workflow-name
      if: success() && env.STACK_EXISTS == 'false'
      run: |
        WORKFLOW_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WorkflowName'].OutputValue" --output text)
        echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_OUTPUT

    - name: Start Glue Workflow
      id: start-workflow
      if: success() && env.STACK_EXISTS == 'false'
      run: |
        WORKFLOW_RUN_ID=$(aws glue start-workflow-run --name ${{ steps.get-workflow-name.outputs.WORKFLOW_NAME }} --query 'RunId' --output text)
        echo "WORKFLOW_RUN_ID=$WORKFLOW_RUN_ID" >> $GITHUB_OUTPUT
        echo "Workflow run ID: $WORKFLOW_RUN_ID"

    - name: Wait for Workflow Completion
      if: success() && env.STACK_EXISTS == 'false'
      run: |
        WORKFLOW_NAME="${{ steps.get-workflow-name.outputs.WORKFLOW_NAME }}"
        WORKFLOW_RUN_ID="${{ steps.start-workflow.outputs.WORKFLOW_RUN_ID }}"
        echo "Waiting for workflow $WORKFLOW_NAME with run ID $WORKFLOW_RUN_ID to complete..."
        while true; do
          WORKFLOW_STATUS=$(aws glue get-workflow-run --name "$WORKFLOW_NAME" --run-id "$WORKFLOW_RUN_ID" --include-graph --query 'Run.Status' --output text)
          echo "Current workflow status: $WORKFLOW_STATUS"
          
          # Get status of individual jobs
          aws glue get-workflow-run --name "$WORKFLOW_NAME" --run-id "$WORKFLOW_RUN_ID" --include-graph --query 'Run.Graph.Nodes[].{Name:Name,JobDetails:JobDetails.JobRuns[0].[JobName,JobRunState,ErrorMessage]}' --output json | jq -r '.[] | "Job: \(.Name), Status: \(.JobDetails[1]), Error: \(.JobDetails[2] // "None")"'
          
          if [ "$WORKFLOW_STATUS" = "COMPLETED" ]; then
            echo "Workflow completed successfully"
            break
          elif [ "$WORKFLOW_STATUS" = "RUNNING" ] || [ "$WORKFLOW_STATUS" = "STARTING" ]; then
            echo "Workflow is still running. Waiting..."
            sleep 60
          else
            echo "Workflow failed or stopped unexpectedly. Status: $WORKFLOW_STATUS"
            exit 1
          fi
        done
