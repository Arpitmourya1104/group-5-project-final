name: Deploy CloudFormation and Run AWS Glue Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DATALAKE_BUCKET: ${{ vars.DATALAKE_BUCKET }}
      DATAWAREHOUSE_BUCKET: ${{ vars.DATAWAREHOUSE_BUCKET }}
      SCRIPT_BUCKET: ${{ vars.SCRIPT_BUCKET }}
      STACK_NAME: ${{ vars.STACK_NAME }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check if DataLake Bucket Exists
      id: check-datalake-bucket
      run: |
        set +e
        aws s3 ls s3://${{ env.DATALAKE_BUCKET }}
        DATALAKE_BUCKET_EXISTS=$?
        set -e
        echo "DATALAKE_BUCKET_EXISTS=$DATALAKE_BUCKET_EXISTS" >> $GITHUB_OUTPUT

    - name: Check if DataWarehouse Bucket Exists
      id: check-datawarehouse-bucket
      run: |
        set +e
        aws s3 ls s3://${{ env.DATAWAREHOUSE_BUCKET }}
        DATAWAREHOUSE_BUCKET_EXISTS=$?
        set -e
        echo "DATAWAREHOUSE_BUCKET_EXISTS=$DATAWAREHOUSE_BUCKET_EXISTS" >> $GITHUB_OUTPUT

    - name: Upload Python scripts to S3
      run: |
        aws s3 cp ingestion.py s3://${{ env.SCRIPT_BUCKET }}/script-ingestion/
        aws s3 cp pre_processing.py s3://${{ env.SCRIPT_BUCKET }}/script-pre-processing/

    - name: Validate CloudFormation template
      run: |
        aws cloudformation validate-template --template-body file://cft-template.yaml

    - name: Check if CloudFormation stack exists
      id: check-stack
      run: |
        set +e
        aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }}
        STACK_EXISTS=$?
        set -e
        echo "STACK_EXISTS=$STACK_EXISTS" >> $GITHUB_OUTPUT

    - name: Fail if stack already exists
      if: steps.check-stack.outputs.STACK_EXISTS == '0'
      run: |
        echo "Stack already exists with the name '${{ env.STACK_NAME }}'. Please change the stack name."
        exit 1

    - name: Deploy CloudFormation stack
      id: deploy-stack
      if: steps.check-stack.outputs.STACK_EXISTS != '0'
      run: |
        set +e
        aws cloudformation deploy \
          --template-file cft-template.yaml \
          --stack-name ${{ env.STACK_NAME }} \
          --parameter-overrides DataLakeBucket=${{ steps.check-datalake-bucket.outputs.DATALAKE_BUCKET_EXISTS == '0' && env.DATALAKE_BUCKET }} DataWarehouseBucket=${{ steps.check-datawarehouse-bucket.outputs.DATAWAREHOUSE_BUCKET_EXISTS == '0' && env.DATAWAREHOUSE_BUCKET }} GlueRoleArn=${{ secrets.GLUE_ROLE_ARN }} ScriptBucket=${{ env.SCRIPT_BUCKET }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset
        DEPLOY_STATUS=$?
        set -e
        echo "DEPLOY_STATUS=$DEPLOY_STATUS" >> $GITHUB_OUTPUT

    - name: Get Workflow Name
      id: get-workflow-name
      if: success() && steps.deploy-stack.outputs.DEPLOY_STATUS == '0'
      run: |
        WORKFLOW_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WorkflowName'].OutputValue" --output text)
        echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_OUTPUT

    - name: Start Glue Workflow
      id: start-workflow
      if: success() && steps.deploy-stack.outputs.DEPLOY_STATUS == '0'
      run: |
        WORKFLOW_RUN_ID=$(aws glue start-workflow-run --name ${{ steps.get-workflow-name.outputs.WORKFLOW_NAME }} --query 'RunId' --output text)
        echo "WORKFLOW_RUN_ID=$WORKFLOW_RUN_ID" >> $GITHUB_OUTPUT
        echo "Workflow run ID: $WORKFLOW_RUN_ID"

    - name: Wait for Workflow Completion
      if: success() && steps.deploy-stack.outputs.DEPLOY_STATUS == '0'
      run: |
        WORKFLOW_NAME="${{ steps.get-workflow-name.outputs.WORKFLOW_NAME }}"
        WORKFLOW_RUN_ID="${{ steps.start-workflow.outputs.WORKFLOW_RUN_ID }}"
        echo "Waiting for workflow $WORKFLOW_NAME with run ID $WORKFLOW_RUN_ID to complete..."
        while true; do
          WORKFLOW_STATUS=$(aws glue get-workflow-run --name "$WORKFLOW_NAME" --run-id "$WORKFLOW_RUN_ID" --include-graph --query 'Run.Status' --output text)
          echo "Current workflow status: $WORKFLOW_STATUS"
          
          # Get status of individual jobs
          aws glue get-workflow-run --name "$WORKFLOW_NAME" --run-id "$WORKFLOW_RUN_ID" --include-graph --query 'Run.Graph.Nodes[].{Name:Name,JobDetails:JobDetails.JobRuns[0].[JobName,JobRunState,ErrorMessage]}' --output json | jq -r '.[] | "Job: \(.Name), Status: \(.JobDetails[1]), Error: \(.JobDetails[2] // "None")"'
          
          if [ "$WORKFLOW_STATUS" = "COMPLETED" ]; then
            echo "Workflow completed successfully"
            break
          elif [ "$WORKFLOW_STATUS" = "RUNNING" ] || [ "$WORKFLOW_STATUS" = "STARTING" ]; then
            echo "Workflow is still running. Waiting..."
            sleep 60
          else
            echo "Workflow failed or stopped unexpectedly. Status: $WORKFLOW_STATUS"
            exit 1
          fi
        done
